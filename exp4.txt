#include <GL/glut.h>
#include <iostream>
using namespace std;

// Initialize OpenGL
void init() {
    glClearColor(1, 1, 1, 1);  // White background
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(-320, 320, -240, 240);  // Set origin at center
}

// Draw X and Y axes
void drawAxes() {
    glColor3f(0, 0, 0);  // Black color
    glBegin(GL_LINES);
    glVertex2i(-320, 0); glVertex2i(320, 0);  // X-axis
    glVertex2i(0, -240); glVertex2i(0, 240);  // Y-axis
    glEnd();
}

// Plot symmetric points for all 8 octants
void plotCirclePoints(int xc, int yc, int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(xc + x, yc + y);
    glVertex2i(xc - x, yc + y);
    glVertex2i(xc + x, yc - y);
    glVertex2i(xc - x, yc - y);
    glVertex2i(xc + y, yc + x);
    glVertex2i(xc - y, yc + x);
    glVertex2i(xc + y, yc - x);
    glVertex2i(xc - y, yc - x);
    glEnd();
}

// Bresenhamâ€™s circle drawing algorithm
void drawCircle(int xc, int yc, int r) {
    int x = 0, y = r;
    int d = 3 - 2 * r;

    glColor3f(1, 0, 0);  // Red color

    while (x <= y) {
        plotCirclePoints(xc, yc, x, y);
        if (d < 0)
            d += 4 * x + 6;
        else {
            d += 4 * (x - y) + 10;
            y--;
        }
        x++;
    }
}

// Display function
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    drawAxes();

    int r;
    cout << "Enter radius of circle: ";
    cin >> r;

    // Draw same circle in all 4 quadrants
    drawCircle(100, 100, r);   // Quadrant I
    drawCircle(-100, 100, r);  // Quadrant II
    drawCircle(-100, -100, r); // Quadrant III
    drawCircle(100, -100, r);  // Quadrant IV

    glFlush();
}

// Main
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(640, 480);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Bresenham Circle in All Quadrants");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
